set nocompatible
filetype off

" Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" vundle
Plugin 'gmarik/Vundle.vim'

" general
Plugin 'ervandew/supertab'
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'Raimondi/delimitMate'
Plugin 'mattn/emmet-vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'majutsushi/tagbar'
Plugin 'edkolev/tmuxline.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'airblade/vim-gitgutter'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'docker/docker', {'rtp': '/contrib/syntax/vim/'}
Plugin 'nginx/nginx', {'rtp': '/contrib/vim/'}
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'vim-scripts/TaskList.vim'
Plugin 'Matt-Deacalion/vim-systemd-syntax'

" javascript
"Plugin 'mozilla/doctorjs'
Plugin 'matthewsimo/angular-vim-snippets'
Plugin 'burnettk/vim-angular'
Plugin 'pangloss/vim-javascript'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'ternjs/tern_for_vim'
Plugin 'moll/vim-node'
Plugin 'yannickcr/eslint-plugin-react'
Plugin 'mxw/vim-jsx'

" Pug (Jade)
Plugin 'digitaltoad/vim-pug'

" go
Plugin 'fatih/vim-go'
Plugin 'jstemmer/gotags'

" scala
Plugin 'derekwyatt/vim-scala'

" pgsql
Plugin 'exu/pgsql.vim'

" css / less
Plugin 'groenewege/vim-less'
Plugin 'ap/vim-css-color'
Plugin 'hail2u/vim-css3-syntax'

" color schemes
Plugin 'duythinht/vim-coffee'
Plugin 'reedes/vim-colors-pencil'
Plugin 'farseer90718/flattr.vim'
Plugin 'tomasr/molokai'
Plugin 'lxmzhv/vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'chriskempson/base16-vim'
Plugin 'chriskempson/tomorrow-theme'
Plugin 'marcopaganini/termschool-vim-theme'
Plugin 'joshdick/onedark.vim'

call vundle#end()
" Vundle end

syntax on
filetype plugin indent on

set autoread
set autoindent
set background=dark
set backspace=indent,eol,start
set colorcolumn=81
set copyindent
set cursorline
set encoding=utf-8
set noexpandtab
set formatoptions+=w
set foldenable
set foldcolumn=2
set foldmethod=indent
set foldlevelstart=99
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo
set hidden
set history=1000
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set linebreak
set listchars=tab:▸\ ,trail:▝,eol:¬
set nobackup
set nobomb
set noerrorbells
set nomodeline
set number
set noswapfile
set nowrap
set mouse=a
set omnifunc=syntaxcomplete#Complete
set pastetoggle=<F2>
set relativenumber
set ruler
set scrolloff=2
set shiftwidth=8
set shiftround
set showmatch
set smartcase
set smarttab
set showcmd
set showmode
set softtabstop=8
set tabstop=8
set textwidth=0
set t_Co=256
set ttyfast
set updatetime=1000
set undolevels=1000
set visualbell
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.bak,*.pyc,*.class
set wildmenu
set wildmode=list:full
set wrapmargin=0

if !has('nvim')
	set term=xterm-256color
	set ttymouse=xterm2
endif

" base16
"let base16colorspace=256
" base16 end

" vim-airline
let g:airline#extensions#tabline#enabled = 1
" vim-airline end

" tmuxline
let g:tmuxline_powerline_separators = 1
" tmuxline end

" check if we're using a gui
if has("gui_running")
	colorscheme base16-default

	if has("gui_gtk2")
		set guifont=Inconsolata\ 12
	elseif has("gui_macvim")
		set guifont=Source\ Code\ Pro\ for\ Powerline:h12
	elseif has("gui_win32")
		set guifont=Consolas:h12:cANSI
	endif
else
	colorscheme railscasts

	let g:airline_theme = 'bubblegum'
	let g:indent_guides_auto_colors = 0
	autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=Black
endif

function! s:DiffWithSaved()
	let filetype=&ft
	diffthis
	vnew | r # | normal! 1Gdd
	diffthis
	exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

function! s:ToggleWrapNoWrap()
	if (&wrap == 1)
		set nowrap
		echom ":set nowrap"
	else
		set wrap
		echom ":set wrap"
	endif
endfunction
com! ToggleWrapNoWrap call s:ToggleWrapNoWrap()

nmap <F8> :TagbarToggle<CR>
nmap \d :DiffSaved<CR>
nmap \l :set list!<CR>
nmap \e :NERDTreeToggle<CR>
nmap \r :so ~/.vimrc<CR>
nmap \w :ToggleWrapNoWrap<CR>
nmap \ct :checktime<CR>

" vim-indent-guides
let g:indent_guides_color_change_percent = 5
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
let g:indent_guides_enable_on_vim_startup = 1
" vim-indent-guides end

" CtrlP
let g:ctrlp_show_hidden = 1
let g:ctrlp_follow_symlinks = 2
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = {
	\ 'dir':  '\v[\/](\.(git|hg|svn))|(node_modules|bower_components|Library)$',
	\ 'file': '\v\.(exe|so|dll)$',
	\ 'link': '',
\ }
" CtrlP end

" NERDTree
let NERDTreeIgnore = ['node_modules$[[dir]]', 'bin$[[dir]]']
" NERDTree end


" tagbar
let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }
" tagbar end

" javascript-libraries-syntax
let g:used_javascript_libs = 'angularjs,angularui,jquery,requirejs'
" javascript-libraries-syntax end

" eclim
let g:EclimFileTypeValidate = 0
" eclim end

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_error_symbol = "✗"
let g:syntastic_warning_symbol = "⚠"
let g:syntastic_javascript_checkers = ['eslint']
" syntastic end

" vim-javascript
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow = 1
" vim-javascript end

" ycm
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_key_list_select_completion = ['<tab>', '<Down>']
let g:ycm_key_list_previous_completion = ['<s-tab>', '<Up>']
" ycm end

" supertab
let g:SuperTabDefaultCompletionType = '<tab>'
" supertab end

" ultisnips
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

let g:UltiSnipsExpandTrigger = "<nop>"
let g:ulti_expand_or_jump_res = 0
function! ExpandSnippetOrCarriageReturn()
	let snippet = UltiSnips#ExpandSnippetOrJump()
	if g:ulti_expand_or_jump_res > 0
		return snippet
	else
		return "\<CR>"
	endif
endfunction
inoremap <expr> <CR> pumvisible() ? "<C-R>=ExpandSnippetOrCarriageReturn()<CR>" : "\<CR>"
" ultisnips end

" vim-go
let g:go_auto_type_info = 0

autocmd FileType go nmap <Leader>gi <Plug>(go-info)
autocmd FileType go nmap <Leader>gd <Plug>(go-doc)

autocmd FileType go nmap <Leader>gdv <Plug>(go-doc-vertical)
autocmd FileType go nmap <Leader>gdb <Plug>(go-doc-browser)

autocmd FileType go nmap <leader>gr <Plug>(go-run)
autocmd FileType go nmap <leader>gb <Plug>(go-build)
autocmd FileType go nmap <leader>gt <Plug>(go-test)

autocmd FileType go nmap <Leader>gds <Plug>(go-def-split)
autocmd FileType go nmap <Leader>gdv <Plug>(go-def-vertical)
autocmd FileType go nmap <Leader>gdt <Plug>(go-def-tab)
" vim-go end

autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType json setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType markdown setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType scss setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" NERDTree
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" NERDTree end

autocmd BufNewFile,BufRead *.md set filetype=markdown
autocmd BufNewFile,BufRead *.pgs set filetype=pgsql
autocmd BufNewFile,BufRead *.sql set filetype=pgsql
autocmd BufNewFile,BufRead *.scss set filetype=scss.css

autocmd CursorMovedI *  if pumvisible() == 0|silent! pclose|endif
autocmd InsertLeave * if pumvisible() == 0|silent! pclose|endif
